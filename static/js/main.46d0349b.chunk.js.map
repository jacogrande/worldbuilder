{"version":3,"sources":["util/noise.js","util/noiseMap.ts","util/mapColors.ts","ColoredMapDisplay.tsx","NoiseMapDisplay.tsx","util/Geometry.ts","ProjectedMap.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PerlinNoise","r","undefined","Math","this","grad3","p","i","floor","random","perm","prototype","dot","g","x","y","z","mix","a","b","t","fade","noise","X","Y","Z","gi000","gi001","gi010","gi011","gi100","gi101","gi110","gi111","n000","n100","n010","n110","n001","n101","n011","n111","u","v","w","nx00","nx01","nx10","nx11","nxy0","nxy1","createNoiseMap","width","height","perlin","noiseMap","row","push","mapColors","noiseValue","colors","period","length","ColoredMapDisplay","props","canvasRef","React","useRef","mapDisplayColors","useEffect","current","context","getContext","fillStyle","fillRect","className","ref","NoiseMapDisplay","useState","setWidth","setHeight","noiseMapColors","value","onChange","event","target","type","name","min","max","onClick","Point3d","project","focalLength","Point2d","ProjectedMap","vertices","console","log","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4PAOaA,EAAc,SAAUC,QAEzBC,IAAND,IAAiBA,EAAIE,MACzBC,KAAKC,MAAQ,CACX,CAAC,EAAG,EAAG,GACP,EAAE,EAAG,EAAG,GACR,CAAC,GAAI,EAAG,GACR,EAAE,GAAI,EAAG,GACT,CAAC,EAAG,EAAG,GACP,EAAE,EAAG,EAAG,GACR,CAAC,EAAG,GAAI,GACR,EAAE,EAAG,GAAI,GACT,CAAC,EAAG,EAAG,GACP,CAAC,GAAI,EAAG,GACR,CAAC,EAAG,GAAI,GACR,CAAC,GAAI,GAAI,IAEXD,KAAKE,EAAI,GACT,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IACvBH,KAAKE,EAAEC,GAAKJ,KAAKK,MAAmB,IAAbP,EAAEQ,UAG3BL,KAAKM,KAAO,GACZ,IAAK,IAAIH,EAAI,EAAGA,EAAI,IAAKA,IACvBH,KAAKM,KAAKH,GAAKH,KAAKE,EAAM,IAAJC,IAI1BP,EAAYW,UAAUC,IAAM,SAAUC,EAAGC,EAAGC,EAAGC,GAC7C,OAAOH,EAAE,GAAKC,EAAID,EAAE,GAAKE,EAAIF,EAAE,GAAKG,GAGtChB,EAAYW,UAAUM,IAAM,SAAUC,EAAGC,EAAGC,GAC1C,OAAQ,EAAMA,GAAKF,EAAIE,EAAID,GAG7BnB,EAAYW,UAAUU,KAAO,SAAUD,GACrC,OAAOA,EAAEA,EAAEA,EAAIA,GAAKA,GAAS,EAAJA,EAAU,IAAQ,KAI7CpB,EAAYW,UAAUW,MAAQ,SAAUR,EAAGC,EAAGC,GAE5C,IAAIO,EAAIpB,KAAKK,MAAMM,GACfU,EAAIrB,KAAKK,MAAMO,GACfU,EAAItB,KAAKK,MAAMQ,GAGnBF,GAAQS,EACRR,GAAQS,EACRR,GAAQS,EAGRF,GAAQ,IACRC,GAAQ,IACRC,GAAQ,IAGR,IAAIC,EAAQtB,KAAKM,KAAKa,EAAInB,KAAKM,KAAKc,EAAIpB,KAAKM,KAAKe,KAAO,GACrDE,EAAQvB,KAAKM,KAAKa,EAAInB,KAAKM,KAAKc,EAAIpB,KAAKM,KAAKe,EAAI,KAAO,GACzDG,EAAQxB,KAAKM,KAAKa,EAAInB,KAAKM,KAAKc,EAAI,EAAIpB,KAAKM,KAAKe,KAAO,GACzDI,EAAQzB,KAAKM,KAAKa,EAAInB,KAAKM,KAAKc,EAAI,EAAIpB,KAAKM,KAAKe,EAAI,KAAO,GAC7DK,EAAQ1B,KAAKM,KAAKa,EAAI,EAAInB,KAAKM,KAAKc,EAAIpB,KAAKM,KAAKe,KAAO,GACzDM,EAAQ3B,KAAKM,KAAKa,EAAI,EAAInB,KAAKM,KAAKc,EAAIpB,KAAKM,KAAKe,EAAI,KAAO,GAC7DO,EAAQ5B,KAAKM,KAAKa,EAAI,EAAInB,KAAKM,KAAKc,EAAI,EAAIpB,KAAKM,KAAKe,KAAO,GAC7DQ,EAAQ7B,KAAKM,KAAKa,EAAI,EAAInB,KAAKM,KAAKc,EAAI,EAAIpB,KAAKM,KAAKe,EAAI,KAAO,GAYjES,EAAO9B,KAAKQ,IAAIR,KAAKC,MAAMqB,GAAQZ,EAAGC,EAAGC,GACzCmB,EAAO/B,KAAKQ,IAAIR,KAAKC,MAAMyB,GAAQhB,EAAI,EAAGC,EAAGC,GAC7CoB,EAAOhC,KAAKQ,IAAIR,KAAKC,MAAMuB,GAAQd,EAAGC,EAAI,EAAGC,GAC7CqB,EAAOjC,KAAKQ,IAAIR,KAAKC,MAAM2B,GAAQlB,EAAI,EAAGC,EAAI,EAAGC,GACjDsB,EAAOlC,KAAKQ,IAAIR,KAAKC,MAAMsB,GAAQb,EAAGC,EAAGC,EAAI,GAC7CuB,EAAOnC,KAAKQ,IAAIR,KAAKC,MAAM0B,GAAQjB,EAAI,EAAGC,EAAGC,EAAI,GACjDwB,EAAOpC,KAAKQ,IAAIR,KAAKC,MAAMwB,GAAQf,EAAGC,EAAI,EAAGC,EAAI,GACjDyB,EAAOrC,KAAKQ,IAAIR,KAAKC,MAAM4B,GAAQnB,EAAI,EAAGC,EAAI,EAAGC,EAAI,GAErD0B,EAAItC,KAAKiB,KAAKP,GACd6B,EAAIvC,KAAKiB,KAAKN,GACd6B,EAAIxC,KAAKiB,KAAKL,GAEd6B,EAAOzC,KAAKa,IAAIiB,EAAMC,EAAMO,GAC5BI,EAAO1C,KAAKa,IAAIqB,EAAMC,EAAMG,GAC5BK,EAAO3C,KAAKa,IAAImB,EAAMC,EAAMK,GAC5BM,EAAO5C,KAAKa,IAAIuB,EAAMC,EAAMC,GAE5BO,EAAO7C,KAAKa,IAAI4B,EAAME,EAAMJ,GAC5BO,EAAO9C,KAAKa,IAAI6B,EAAME,EAAML,GAIhC,OAFWvC,KAAKa,IAAIgC,EAAMC,EAAMN,GAElB,GCrGT,IAAMO,EAAiB,SAACC,EAAeC,GAI5C,IAHA,IAAMC,EAAS,IAAItD,EACbuD,EAAuB,GAEpBxC,EAAI,EAAGA,EAAIsC,EAAQtC,IAAK,CAE/B,IADA,IAAIyC,EAAgB,GACX1C,EAAI,EAAGA,EAAIsC,EAAOtC,IACzB0C,EAAIC,KAAKH,EAAOhC,MAAMR,EAAI,GAAIC,EAAI,GAAI,IAExCwC,EAASE,KAAKD,GAGhB,OAAOD,GClBIG,EAAY,SAACC,EAAoBC,GAE5C,IAAMC,EAAiB,EAAID,EAAOE,OAAS,KAG3C,OAAOF,EAFYzD,KAAKK,MAAMmD,EAAaE,KCuD9BE,EAjDW,SAACC,GACzB,IACMC,EAAYC,IAAMC,OAA0B,MAE5CC,EAAmB,CACvB,qBACA,kBACA,kBACA,oBACA,qBACA,qBACA,oBACA,oBACA,oBACA,mBACA,mBACA,iBACA,kBAqBF,OAlBAF,IAAMG,WAAU,WACd,GAAIJ,EAAUK,QAAS,CACrB,IACMC,EAD4BN,EAAUK,QACrBE,WAAW,MAClC,GAAID,EACF,IAAK,IAAIxD,EAAI,EAAGA,EAAIiD,EAAMX,OAAQtC,IAChC,IAAK,IAAID,EAAI,EAAGA,EAAIkD,EAAMZ,MAAOtC,IAC/ByD,EAAQE,UAAYf,EAClBM,EAAMT,SAASxC,GAAGD,GAClBsD,GAEFG,EAAQG,SA9BJ,EA8Ba5D,EA9Bb,EA8BwBC,EA9BxB,QAmCX,CAACiD,EAAMZ,MAAOY,EAAMX,SAGrB,yBAAKsB,UAAU,OACb,4BACEC,IAAKX,EACLb,MAzCQ,EAyCDY,EAAMZ,MACbC,OA1CQ,EA0CAW,EAAMX,WCsCPwB,EArFS,WAAO,IAAD,EACFX,IAAMY,SAAiB,IADrB,mBACrB1B,EADqB,KACd2B,EADc,OAEAb,IAAMY,SAAiB,IAFvB,mBAErBzB,EAFqB,KAEb2B,EAFa,KAKtBC,EAAiB,CACrB,qBACA,qBACA,qBACA,qBACA,qBACA,kBACA,kBACA,kBACA,mBAGI1B,EAAWJ,EAAeC,EAAOC,GAEjCY,EAAYC,IAAMC,OAA0B,MAElDD,IAAMG,WAAU,WACd,GAAIJ,EAAUK,QAAS,CACrB,IACMC,EAD4BN,EAAUK,QACrBE,WAAW,MAClC,GAAID,EACF,IAAK,IAAIxD,EAAI,EAAGA,EAAIsC,EAAQtC,IAC1B,IAAK,IAAID,EAAI,EAAGA,EAAIsC,EAAOtC,IACzByD,EAAQE,UAAYf,EAAUH,EAASxC,GAAGD,GAAImE,GAC9CV,EAAQG,SA1BJ,EA0Ba5D,EA1Bb,EA0BwBC,EA1BxB,QA+BX,CAACqC,EAAOC,IAeX,OACE,yBAAKsB,UAAU,YACb,4BACEC,IAAKX,EACLb,MAlDQ,EAkDDA,EACPC,OAnDQ,EAmDAA,IAEV,6BANF,SAQE,2BACE6B,MAAO9B,EACP+B,SAxBoB,SAACC,GACzBL,EAASK,EAAMC,OAAOH,QAwBlBI,KAAK,QACLC,KAAK,QACLC,IAAI,IACJC,IAAI,QAEN,6BAhBF,UAkBE,2BACEP,MAAO7B,EACP8B,SA/BqB,SAACC,GAC1BJ,EAAUI,EAAMC,OAAOH,QA+BnBI,KAAK,QACLC,KAAK,SACLC,IAAI,IACJC,IAAI,QAEN,6BACA,4BAAQC,QAlCQ,SAACN,GAEnBL,EAAS3B,EAAQ,GACjB2B,EAAS3B,EAAQ,KA+Bf,gBACA,6BACA,6BACA,kBAAC,EAAD,CAAmBG,SAAUA,EAAUH,MAAOA,EAAOC,OAAQA,MC9EtDsC,EAAU,SAAU7E,EAAWC,EAAWC,GAarD,MAZc,CACZF,IACAC,IACAC,IAIA4E,QAAS,SAAUC,GACjB,IAAI5F,EAAI4F,EAAczF,KAAKY,EAC3B,OAjBU,SAACF,EAAWC,GAC1B,MAAO,CACLD,IACAC,KAcS+E,CAAQ7F,EAAEG,KAAKU,EAAGb,EAAEG,KAAKW,MC8BvBgF,EA3CM,WAOnB,IANA,IAKMC,EAAsC,GACnChF,EAAI,EAAGA,EAHF,EAGaA,IAAI,CAE7B,IADA,IAAIwC,EAAM,GACF1C,EAAI,EAAGA,EAPH,EAOcA,IACxB0C,EAAIC,KAAKkC,EAAQ7E,EAAG,EAAGE,EAAE,IAAK4E,QAAQ,KAExCI,EAASvC,KAAKD,GAGhByC,QAAQC,IAAIF,GAEK7C,EAfH,EADC,GAgBf,IAEMc,EAAYC,IAAMC,OAA0B,MAiBlD,OAhBAD,IAAMG,WAAU,WACd,GAAIJ,EAAUK,QAAS,CACrB,IACMC,EAD4BN,EAAUK,QACrBE,WAAW,MAClC,GAAGD,EAAQ,CACTA,EAAQE,UAAY,OACpB,IAAI,IAAIzD,EAAI,EAAGA,EAtBP,EAsBkBA,IACxB,IAAI,IAAIF,EAAI,EAAGA,EAzBT,EAyBoBA,IACxBmF,QAAQC,IAAIF,EAAShF,GAAGF,GAAGA,EAAGkF,EAAShF,GAAGF,GAAGC,GAC7CwD,EAAQG,SAASsB,EAAShF,GAAGF,GAAGA,EAAGkF,EAAShF,GAAGF,GAAGC,EAAG,IAAK,SAKjE,CAhCW,EADC,IAoCb,yBAAK4D,UAAU,uBACb,4BAAQC,IAAKX,EAAWb,MApCd,EAoC4BC,OArC3B,M,eCkBF8C,MAjBf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyB,KAAK,eACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCHQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.46d0349b.chunk.js","sourcesContent":["// https://gist.github.com/banksean/304522 (Sean McCullough)\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\n\nexport const PerlinNoise = function (r) {\n  // Classic Perlin noise in 3D, for comparison\n  if (r === undefined) r = Math;\n  this.grad3 = [\n    [1, 1, 0],\n    [-1, 1, 0],\n    [1, -1, 0],\n    [-1, -1, 0],\n    [1, 0, 1],\n    [-1, 0, 1],\n    [1, 0, -1],\n    [-1, 0, -1],\n    [0, 1, 1],\n    [0, -1, 1],\n    [0, 1, -1],\n    [0, -1, -1],\n  ];\n  this.p = [];\n  for (let i = 0; i < 256; i++) {\n    this.p[i] = Math.floor(r.random() * 256);\n  }\n  // To remove the need for index wrapping, double the permutation table length\n  this.perm = [];\n  for (let i = 0; i < 512; i++) {\n    this.perm[i] = this.p[i & 255];\n  }\n};\n\nPerlinNoise.prototype.dot = function (g, x, y, z) {\n  return g[0] * x + g[1] * y + g[2] * z;\n};\n\nPerlinNoise.prototype.mix = function (a, b, t) {\n  return (1.0 - t) * a + t * b;\n};\n\nPerlinNoise.prototype.fade = function (t) {\n  return t*t*t * t * (t * (t * 6.0 - 15.0) + 10.0);\n};\n\n// Classic Perlin noise, 3D version\nPerlinNoise.prototype.noise = function (x, y, z) {\n  // Find unit grid cell containing point\n  var X = Math.floor(x);\n  var Y = Math.floor(y);\n  var Z = Math.floor(z);\n\n  // Get relative xyz coordinates of point within that cell\n  x = x - X;\n  y = y - Y;\n  z = z - Z;\n\n  // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n  X = X & 255;\n  Y = Y & 255;\n  Z = Z & 255;\n\n  // Calculate a set of eight hashed gradient indices\n  var gi000 = this.perm[X + this.perm[Y + this.perm[Z]]] % 12;\n  var gi001 = this.perm[X + this.perm[Y + this.perm[Z + 1]]] % 12;\n  var gi010 = this.perm[X + this.perm[Y + 1 + this.perm[Z]]] % 12;\n  var gi011 = this.perm[X + this.perm[Y + 1 + this.perm[Z + 1]]] % 12;\n  var gi100 = this.perm[X + 1 + this.perm[Y + this.perm[Z]]] % 12;\n  var gi101 = this.perm[X + 1 + this.perm[Y + this.perm[Z + 1]]] % 12;\n  var gi110 = this.perm[X + 1 + this.perm[Y + 1 + this.perm[Z]]] % 12;\n  var gi111 = this.perm[X + 1 + this.perm[Y + 1 + this.perm[Z + 1]]] % 12;\n\n  // The gradients of each corner are now:\n  // g000 = grad3[gi000];\n  // g001 = grad3[gi001];\n  // g010 = grad3[gi010];\n  // g011 = grad3[gi011];\n  // g100 = grad3[gi100];\n  // g101 = grad3[gi101];\n  // g110 = grad3[gi110];\n  // g111 = grad3[gi111];\n  // Calculate noise contributions from each of the eight corners\n  var n000 = this.dot(this.grad3[gi000], x, y, z);\n  var n100 = this.dot(this.grad3[gi100], x - 1, y, z);\n  var n010 = this.dot(this.grad3[gi010], x, y - 1, z);\n  var n110 = this.dot(this.grad3[gi110], x - 1, y - 1, z);\n  var n001 = this.dot(this.grad3[gi001], x, y, z - 1);\n  var n101 = this.dot(this.grad3[gi101], x - 1, y, z - 1);\n  var n011 = this.dot(this.grad3[gi011], x, y - 1, z - 1);\n  var n111 = this.dot(this.grad3[gi111], x - 1, y - 1, z - 1);\n  // Compute the fade curve value for each of x, y, z\n  var u = this.fade(x);\n  var v = this.fade(y);\n  var w = this.fade(z);\n  // Interpolate along x the contributions from each of the corners\n  var nx00 = this.mix(n000, n100, u);\n  var nx01 = this.mix(n001, n101, u);\n  var nx10 = this.mix(n010, n110, u);\n  var nx11 = this.mix(n011, n111, u);\n  // Interpolate the four results along y\n  var nxy0 = this.mix(nx00, nx10, v);\n  var nxy1 = this.mix(nx01, nx11, v);\n  // Interpolate the two last results along z\n  var nxyz = this.mix(nxy0, nxy1, w);\n\n  return nxyz + 1;\n};\n","import { PerlinNoise } from \"./noise.js\";\n\n// function that creates a perlin noise map\n// @PARAMS:\n// width : a number representing how many tiles wide the map will be\n// height : a number representing how many tiles long the map will be\nexport const createNoiseMap = (width: number, height: number): number[][] => {\n  const perlin = new PerlinNoise();\n  const noiseMap: number[][] = [];\n\n  for (let y = 0; y < height; y++) {\n    let row: number[] = [];\n    for (let x = 0; x < width; x++) {\n      row.push(perlin.noise(x / 20, y / 20, 0));\n    }\n    noiseMap.push(row);\n  }\n\n  return noiseMap;\n};\n","export const mapColors = (noiseValue: number, colors: string[]): string => {\n  // add a small number so that the max value isn't out of the array bounds\n  const period: number = 2 / colors.length + 0.000001;\n  const colorIndex = Math.floor(noiseValue / period);\n\n  return colors[colorIndex];\n};\n","import React from \"react\";\nimport { mapColors } from \"./util/mapColors\";\n\ninterface IColoredMapDisplay {\n  noiseMap: number[][];\n  width: number;\n  height: number;\n}\n\nconst ColoredMapDisplay = (props: IColoredMapDisplay) => {\n  const scale = 7;\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n\n  const mapDisplayColors = [\n    \"rgb(221, 219, 216)\",\n    \"rgb(70, 52, 30)\",\n    \"rgb(87, 67, 43)\",\n    \"rgb(103, 143, 77)\",\n    \"rgb(142, 176, 121)\",\n    \"rgb(231, 220, 174)\",\n    \"rgb(64, 163, 172)\",\n    \"rgb(51, 140, 156)\",\n    \"rgb(32, 112, 126)\",\n    \"rgb(36, 99, 135)\",\n    \"rgb(25, 88, 124)\",\n    \"rgb(9, 61, 91)\",\n    \"rgb(6, 44, 66)\",\n  ];\n\n  React.useEffect(() => {\n    if (canvasRef.current) {\n      const canvas: HTMLCanvasElement = canvasRef.current;\n      const context = canvas.getContext(\"2d\");\n      if (context) {\n        for (let y = 0; y < props.height; y++) {\n          for (let x = 0; x < props.width; x++) {\n            context.fillStyle = mapColors(\n              props.noiseMap[y][x],\n              mapDisplayColors\n            );\n            context.fillRect(x * scale, y * scale, scale, scale);\n          }\n        }\n      }\n    }\n  }, [props.width, props.height]);\n\n  return (\n    <div className=\"map\">\n      <canvas\n        ref={canvasRef}\n        width={props.width * scale}\n        height={props.height * scale}\n      ></canvas>\n    </div>\n  );\n};\n\nexport default ColoredMapDisplay;\n","import React from \"react\";\nimport { createNoiseMap } from \"./util/noiseMap\";\nimport { mapColors } from \"./util/mapColors\";\nimport ColoredMapDisplay from \"./ColoredMapDisplay\";\n\nconst NoiseMapDisplay = () => {\n  const [width, setWidth] = React.useState<number>(75);\n  const [height, setHeight] = React.useState<number>(75);\n  const scale = 2;\n\n  const noiseMapColors = [\n    \"rgb(255, 255, 255)\",\n    \"rgb(209, 209, 209)\",\n    \"rgb(173, 173, 173)\",\n    \"rgb(134, 134, 134)\",\n    \"rgb(110, 109, 109)\",\n    \"rgb(83, 83, 83)\",\n    \"rgb(61, 61, 61)\",\n    \"rgb(46, 46, 46)\",\n    \"rgb(27, 27, 27)\",\n  ];\n\n  const noiseMap = createNoiseMap(width, height);\n\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n\n  React.useEffect(() => {\n    if (canvasRef.current) {\n      const canvas: HTMLCanvasElement = canvasRef.current;\n      const context = canvas.getContext(\"2d\");\n      if (context) {\n        for (let y = 0; y < height; y++) {\n          for (let x = 0; x < width; x++) {\n            context.fillStyle = mapColors(noiseMap[y][x], noiseMapColors);\n            context.fillRect(x * scale, y * scale, scale, scale);\n          }\n        }\n      }\n    }\n  }, [width, height]);\n\n  const handleWidthChange = (event: any): void => {\n    setWidth(event.target.value);\n  };\n  const handleHeightChange = (event: any): void => {\n    setHeight(event.target.value);\n  };\n\n  const handleClick = (event: any): void => {\n    // arbitrarily refresh the map\n    setWidth(width + 1);\n    setWidth(width - 1);\n  };\n\n  return (\n    <div className=\"noiseMap\">\n      <canvas\n        ref={canvasRef}\n        width={width * scale}\n        height={height * scale}\n      ></canvas>\n      <br />\n      Width:\n      <input\n        value={width}\n        onChange={handleWidthChange}\n        type=\"range\"\n        name=\"width\"\n        min=\"0\"\n        max=\"200\"\n      />\n      <br />\n      Height:\n      <input\n        value={height}\n        onChange={handleHeightChange}\n        type=\"range\"\n        name=\"height\"\n        min=\"0\"\n        max=\"200\"\n      />\n      <br />\n      <button onClick={handleClick}>Generate Map</button>\n      <br />\n      <br />\n      <ColoredMapDisplay noiseMap={noiseMap} width={width} height={height} />\n    </div>\n  );\n};\n\nexport default NoiseMapDisplay;\n","const Point2d = (x: number, y: number) => {\n  return {\n    x,\n    y,\n  };\n};\n\nexport const Point3d = function (x: number, y: number, z: number) {\n  const point = {\n    x,\n    y,\n    z,\n    // projection function\n    // @PARAMS\n    // focalLength <number> : how far away the camera is\n    project: function (focalLength: number) {\n      let r = focalLength / this.z;\n      return Point2d(r*this.x, r*this.y);\n    },\n  };\n  return point;\n};\n","import React from \"react\";\nimport { createNoiseMap } from \"./util/noiseMap\";\nimport { Point3d } from \"./util/Geometry\";\n\nconst ProjectedMap = () => {\n  const height = 5;\n  const width = 5;\n  const scale = 5;\n  const depth = 5;\n\n  const vertices: {x: number, y:number}[][] = [];\n  for (let z = 0; z < depth; z++){\n    let row = [];\n    for(let x = 0; x < width; x++){\n      row.push(Point3d(x, 1, z+0.1).project(10));\n    }\n    vertices.push(row);\n  }\n\n  console.log(vertices);\n\n  const noiseMap = createNoiseMap(width, height);\n\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n  React.useEffect(() => {\n    if (canvasRef.current) {\n      const canvas: HTMLCanvasElement = canvasRef.current;\n      const context = canvas.getContext(\"2d\");\n      if(context){\n        context.fillStyle = \"#000\";\n        for(let z = 0; z < depth; z++){\n          for(let x = 0; x < width; x++){\n            console.log(vertices[z][x].x, vertices[z][x].y);\n            context.fillRect(vertices[z][x].x, vertices[z][x].y, 100, 100);\n          }\n        }\n      }\n    }\n  }, [width, height]);\n\n  return (\n    <div className=\"projectedMapWrapper\">\n      <canvas ref={canvasRef} width={width} height={height}></canvas>\n    </div>\n  );\n};\n\nexport default ProjectedMap;\n","import React from \"react\";\nimport \"./App.css\";\nimport NoiseMapDisplay from \"./NoiseMapDisplay\";\nimport ProjectedMap from \"./ProjectedMap\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/visualizer\">\n            <ProjectedMap />\n          </Route>\n          <Route path=\"/\">\n            <NoiseMapDisplay />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}